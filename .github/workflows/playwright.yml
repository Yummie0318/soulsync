name: Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v5

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4Ô∏è‚É£ Install Playwright browsers
      - name: Install Playwright
        run: npx playwright install --with-deps

      # 5Ô∏è‚É£ List test files for debugging
      - name: List all tests
        run: |
          echo "üìú Listing all test files in ./tests/"
          find ./tests -name "*.spec.ts"

      # 6Ô∏è‚É£ Run login test to generate storage
      - name: Generate storage state (login)
        run: |
          echo "üîë Generating login session..."
          mkdir -p storage
          npx playwright test tests/1login.spec.ts --project=chromium --reporter=line
        env:
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 7Ô∏è‚É£ Verify logged-in storage file
      - name: Verify logged-in storage file
        run: |
          echo "üìÅ Checking storage file after login:"
          if [ ! -f storage/logged-in.json ]; then
            echo "‚ùå storage/logged-in.json was not created!"
            exit 1
          fi
          ls -l storage

      # 8Ô∏è‚É£ Run all other Playwright tests
      - name: Run Playwright tests
        run: |
          echo "üé≠ Running main Playwright tests..."
          npx playwright test --workers=1 --reporter=html
        env:
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 9Ô∏è‚É£ Upload HTML report
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 30

      # üîü Upload to GitHub Pages
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report

  # 11Ô∏è‚É£ Deploy report to GitHub Pages
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
